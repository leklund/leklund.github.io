<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | code.eklund.io]]></title>
  <link href="http://code.eklund.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://code.eklund.io/"/>
  <updated>2014-05-27T18:07:26-04:00</updated>
  <id>http://code.eklund.io/</id>
  <author>
    <name><![CDATA[Lukas Eklund]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Safely Ignoring Heroku Errors on Rake Db:migrate]]></title>
    <link href="http://code.eklund.io/blog/2014/05/27/ignoring-heroku-errors-on-rake-db-migrate/"/>
    <updated>2014-05-27T17:37:30-04:00</updated>
    <id>http://code.eklund.io/blog/2014/05/27/ignoring-heroku-errors-on-rake-db-migrate</id>
    <content type="html"><![CDATA[<p>(Repurposing my answer to this <a href="http://stackoverflow.com/questions/17300341/migrate-not-working-on-heroku/17306077">stackoverflow question</a> as a blog post)</p>

<p>If you are using Rails 4.x on Heroku and you have your schema format set to sql (which you probably should), you will see this error when running <code>heroku run rake db:migrate</code></p>

<p><code>
Aborted!
Error dumping database
.../activerecord-4.0.4/lib/active_record/tasks/postgresql_database_tasks.rb:55:in `structure_dump'
.../activerecord-4.0.4/lib/active_record/tasks/database_tasks.rb:143:in `structure_dump'
</code></p>

<p>This is an interesting bug that, as it turns out, can be ignored.</p>

<p>ActiveRecord will only run the task <code>db:structure:dump</code> if you are using &lsquo;sql&rsquo; as
your <code>active_record.schema_format</code>.  And that rake task (<code>db:structure:dump</code>) will
fail on Heroku because the executable <code>pg_dump</code> is (unsurprisingly) not in the
binary path.  Interestingly enough, Heroku states that <code>db:schema:dump</code> is not
supported but if you set the schema format to ruby, it works fine. Of course,
you would end up with a <code>schema.rb</code> file on one-off dyno that will not exist
shortly after the rake task finished running.</p>

<p>In Rails 3, the dump task would only raise an error is the exit code of the
command was 1. On unix based systems if a command is not found, the exit code
is 127.  So even if the <code>pg_dump</code> command fails on Rails 3 (which it does), it
won&rsquo;t raise an error and it won&rsquo;t halt the rake task. So anyone using a sql
schema format with Rails 3 wouldn&rsquo;t have this issue because it would fail
silently. The code was refactored in Rails 4 to properly raise an error if the dump failed.
This means that <code>db:migrate</code> will raise an error on Heroku.</p>

<p><strong>However, even though it errors with rake aborted the DDL from the migration is actually executed and committed.</strong></p>

<p>Here are some possible solutions (if the error really bothers you):</p>

<ul>
<li>Ignore the error as the migrations are actually running.</li>
<li>Since you don&rsquo;t care about the structure dump on production, set the schema_format to ruby. In config/environments/production.rb:</li>
</ul>


<p><code>ruby
config.active_record.schema_format = :ruby
</code></p>

<ul>
<li>If for some reason you don&rsquo;t want to change the config file: add a rake task with the following to suppress the error:</li>
</ul>


<p>``` ruby
if Rails.env == &lsquo;production&rsquo;</p>

<pre><code>Rake::Task["db:structure:dump"].clear
</code></pre>

<p>end
```</p>
]]></content>
  </entry>
  
</feed>
