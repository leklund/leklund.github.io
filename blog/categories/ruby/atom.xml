<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | code.eklund.io]]></title>
  <link href="http://code.eklund.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://code.eklund.io/"/>
  <updated>2018-12-12T14:55:52-06:00</updated>
  <id>http://code.eklund.io/</id>
  <author>
    <name><![CDATA[Lukas Eklund]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Implementing a Summed-Area Table in Ruby]]></title>
    <link href="http://code.eklund.io/blog/2018/12/12/summed-area-table-in-ruby/"/>
    <updated>2018-12-12T12:32:47-06:00</updated>
    <id>http://code.eklund.io/blog/2018/12/12/summed-area-table-in-ruby</id>
    <content type="html"><![CDATA[<p>Day 11 of the <a href="https://adventofcode.com/2018/day/11">2018 Advent of Code</a> required you to generate a 300 x 300 matrix and then find
the 3 x 3 sub-matrix that had the largest value. Then part 2 required you to find the largest sub-matrix
of any size that had the maximum value. My first solution used a hash to map every entry in the
matrix. The keys were an <code>[x,y]</code> array and the value was the value at that coordinate. Then by iterating over all rows
and columns I could check every 3 x 3 area and find the maximum value. This worked but wasn&rsquo;t particularly fast (I believe the
complexity was <code>O(NÂ³)</code>).</p>

<p>But then I got to part 2 and I had to check more than just 3 x 3 areas and my implementation was too slow. So I implemented a new
solution using the <code>Matrix</code> class and the <code>minor</code> method so get the sub-matrix. You can see this implementation <a href="https://github.com/leklund/aoc/blob/master/2018/11.rb">here</a>.
In hindsight this wasn&rsquo;t much faster then my first version I just guessed that the maximum area would be less than 20 x 20. One
thing I should have done was to track the maximum value for each square size and exit if it ever went down.</p>

<p>After solving it with a <code>Matrix</code> I wanted to speed up mu implementation so I read some of the tips on reddit which led to
to the wikipedia article for
the <a href="https://en.wikipedia.org/wiki/Summed-area_table">summed-area table</a>.
This is exactly what I needed!</p>

<blockquote><p>A summed-area table is a data structure and algorithm for quickly and efficiently generating the sum of values in a rectangular subset of a grid.</p></blockquote>

<p>I didn&rsquo;t find a Ruby implementation so I decided to implement one for myself. First, here&rsquo;s a visualization of what the summed-area table (SAT) looks like:</p>

<pre>
4x4 matrix          SAT

1  0  6  5       1  1  7 12
4  8  6  7  -->  5 13 25 37
5  3  0  9      10 21 33 54
8  3  4  1      18 32 48 70
</pre>


<p>The formula for find the sum of the sub-matrix from (1, 1) to (2, 2) is then
<code>sat[2, 2] + sat[0, 0] - sat[2, 0] - sat[0, 2]</code> which is
<code>33 + 1 - 7 - 10 == 17</code>.</p>

<p>Since we are starting from the top left in this example, the value for any cell in the SAT
is the sum of all the cells above and the left of the cell.</p>

<p>Since I&rsquo;m working with matrices I opted to extend (monkey-patch) <code>Matrix</code> with two methods: one for generating the summed-area table, the other to calculate an area.</p>

<p>```ruby
require &lsquo;matrix&rsquo;</p>

<p>class Matrix
  def summed_area_table</p>

<pre><code>return @sat if @sat
rows = row_count
cols = column_count

sat = Matrix.zero(rows, cols).to_a

rows.times do |x|
  cols.times do |y|
    a = self[x, y]

    b = sat.fetch(x - 1, []).fetch(y, 0)
    c = sat[x].fetch(y - 1, 0)

    d = x.zero? || y.zero? ? 0 : sat[x - 1][y - 1]

    sat[x][y] = a + b + c - d
  end
end

@sat = Matrix[*sat]
</code></pre>

<p>  end</p>

<p>  def summed_area(x0, y0, x1, y1)</p>

<pre><code>x0 = x0.zero? ? 0 : x0 - 1
y0 = y0.zero? ? 0 : y0 - 1
summed_area_table[x1, y1] +
  summed_area_table[x0, y0] -
  summed_area_table[x1, y0] -
  summed_area_table[x0, y1]
</code></pre>

<p>  end
end
```</p>

<p>With this new class I was able to <a href="https://github.com/leklund/aoc/blob/master/2018/11_opt.rb">optimize my AOC solution</a> and even though I knew that the size of the square in the answer for my input
was 16 I still searched every possible size and it still performed faster than my original implementation. The code above for the summed-area calculation is also on <a href="https://github.com/leklund/aoc/blob/master/2018/summed_area.rb">github</a> (with some optimizations that shave some time off SAT generation).</p>

<p>Usage example:</p>

<p>```
[1] pry(main)> require &lsquo;./summed_area&rsquo;
=> true</p>

<p>[2] pry(main)> m = Matrix.build(10000) { rand };    # It takes a several seconds to seed the 10,000 x 10,000 matrix</p>

<p>[3] pry(main)> m.summed_area(100, 100, 5555, 4444)  # The first time this takes some time as the SAT is built
=> 11852796.933710525</p>

<p>[4] pry(main)> m.summed_area(1020, 666, 8341, 9900) # And now the calculation is instant!
=> 33806690.016706355
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bauditor Gem - Bundle-audit Multiple Repos]]></title>
    <link href="http://code.eklund.io/blog/2017/01/25/bauditor-gem-bundle-audit-multiple-repos/"/>
    <updated>2017-01-25T17:18:03-06:00</updated>
    <id>http://code.eklund.io/blog/2017/01/25/bauditor-gem-bundle-audit-multiple-repos</id>
    <content type="html"><![CDATA[<p>I was adding <a href="https://github.com/rubysec/bundler-audit">bundler-audit</a> to a ruby application recently and I had this idea that it would be really nice to be able to run it on multiple repositories at once. It&rsquo;s great when you get the status as part of a CI run or a rake task, but if you have some applications that are seldom updated it&rsquo;s important to audit them as well. So I made a thing.</p>

<p>Introducing <a href="https://github.com/leklund/bauditor">bauditor</a>, a simple gem to help you run bundle-audit on multiple repositories in one pass. It will take a config file with a list of git repositories or you can pass them in on the command line:</p>

<p>```
$ bauditor help audit
Usage:
  bauditor audit</p>

<p>Options:
  r, [&mdash;repos=one two three]
  c, [&mdash;config=CONFIG]</p>

<p>run bundle-audit on multiple repositories
```</p>

<p>It will clone each repo into a tempdir and then run <code>bundle-audit</code>. It prints a handy summary at the end. It cleans up after each run so it&rsquo;s not super fast yet. One of the features I want to add is the ability to persist the repositories as well as specify the repository path.</p>

<p>Check it out on rubygems: <a href="https://rubygems.org/gems/bauditor">bauditor 0.2.2</a>. Or get the source on <a href="https://github.com/leklund/bauditor">GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Capistrano Rake Tasks Work With Envdir]]></title>
    <link href="http://code.eklund.io/blog/2016/09/23/making-capitstrano-rake-tasks-work-with-envdir/"/>
    <updated>2016-09-23T13:10:48-05:00</updated>
    <id>http://code.eklund.io/blog/2016/09/23/making-capitstrano-rake-tasks-work-with-envdir</id>
    <content type="html"><![CDATA[<p>Using envdir to manage environment variables for a Ruby app means that rake tasks run via
Capistrano can fail or have unexpected output because the ENV hash won&rsquo;t be populated with
what is located in the envdir.</p>

<p><strong>What is <code>envdir</code>?</strong></p>

<p><a href="https://cr.yp.to/daemontools/envdir.html">https://cr.yp.to/daemontools/envdir.html</a></p>

<blockquote><p><code>envdir</code> runs another program with environment modified according to files in a specified directory.</p></blockquote>

<p><strong>Why not use <code>dotenv</code>?</strong></p>

<p><code>dotenv</code> isn&rsquo;t meant for production and <code>envdir</code> integrates nicely with <code>runit</code>. And if that&rsquo;s how your
SRE team wants to manage apps then that&rsquo;s what you use.</p>

<p><strong>So how can I fix it?</strong></p>

<p>Add to the rake command prefix in SSHKit.</p>

<p>Create a new Capistrano task</p>

<p>```</p>

<h1>lib/capistrano/tasks/envdir.rake</h1>

<p>desc &lsquo;Prefix rake tasks with envidr&rsquo;
namespace :envdir do
  task :prefix_rake do</p>

<pre><code>  SSHKit.config.command_map.prefix[:rake].unshift 'envdir /path/to/env/directory'
end
</code></pre>

<p>  end
end
```</p>

<p>This will create a new Capistrano task: <code>envdir:prefix_rake</code>. By using <code>unshift</code>
we ensure that if the prefix has already been set (for example by <code>capistrano/bundler</code>)
that we don&rsquo;t overwrite what is already there.</p>

<p>Wire it up.</p>

<p>Load the rake task
```</p>

<h1>Capfile</h1>

<p>Dir.glob(&lsquo;lib/capistrano/tasks/*.rake&rsquo;).each { |r| import r }
```</p>

<p>Inject the new task
```</p>

<h1>config/deploy.rb</h1>

<p>before &lsquo;deploy:starting&rsquo;, &lsquo;envdir:prefix_rake&rsquo;
```</p>

<p>Capistrano will now run rake tasks prefixed. For example,
here is how the asset precompilation task will run (assumes <code>capistrano/bundler</code>
has been required as part of <code>capitrano/rails</code>)</p>

<p><code>
envdir /path/to/env/directory bundle exec rake assets:precompile
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modeling Adjacency Lists in Ruby]]></title>
    <link href="http://code.eklund.io/blog/2015/04/29/modeling-adjacency-lists-in-ruby/"/>
    <updated>2015-04-29T10:07:35-05:00</updated>
    <id>http://code.eklund.io/blog/2015/04/29/modeling-adjacency-lists-in-ruby</id>
    <content type="html"><![CDATA[<p>Normally, this would be a task I would try to keep in my data layer
since PostgreSQL is so great at doing this with recursive queries. However,
sometimes you just need to operate in Ruby and Ruby alone. Let&rsquo;s say I want to model
what I always call an adjacency list but what is more technically a a directed graph.
We have a set of nodes where any given node can have a parent node:</p>

<pre>
    1
   / \
  2   3
     / \
    4   5
</pre>


<p>We will define two classes: Tree and Node. A Node object is a very simple:</p>

<p>```ruby
class Node
  attr_accessor :id, :name, :parent, :children</p>

<p>  def initialize(opts = {})</p>

<pre><code>@id = opts[:id]
@name = opts[:name]
@parent = opts[:parent]

# add children if passed an array or initialize as an empty array
@children = opts[:children].is_a?(Array) ? opts[:children] : []
</code></pre>

<p>  end
end
```</p>

<p>We have accessors for the id which will be a unique identifier and will give us the ability to easily retrieve
nodes from the tree. The name is just an arbitrary string. Parent is just another Node object. Children is an array of
Node objects that all have the current node as a parent. The nodes above would could be modeled as:</p>

<p><code>ruby
n1 = Node.new id: 1, name: 'one'
n2 = Node.new id: 2, parent: n1, name: 'two'
n3 = Node.new id: 3, parent: n1, name: 'three'
n4 = Node.new id: 4, parent: n3, name: 'four'
n5 = Node.new id: 5, parent: n3, name: 'five'
n1.children = [n2, n3]
n3.children = [n4, n5]
</code></p>

<p>Adding children like this is tedious and we also don&rsquo;t have good way to traverse the tree. So let&rsquo;s introduce a tree class.</p>

<p>```ruby
class Tree
  attr_accessor :nodes</p>

<p>  def initialize</p>

<pre><code>@nodes = {}
</code></pre>

<p>  end</p>

<p>  def node(id)</p>

<pre><code>@nodes[id]
</code></pre>

<p>  end</p>

<p>  # helper for hash-like access
  def <a href="id"></a></p>

<pre><code>node(id)
</code></pre>

<p>  end</p>

<p>  def add_node(node)</p>

<pre><code>raise "#{node.class} != Node" if node.class != Node
if !node.parent.nil?
  # check if the parent is part of the tree
  existing_parent = self.node(node.parent.id)
  if existing_parent.nil?
    raise "Unable to add node #{node.id} to the tree. It specifies a parent #{node.parent.id} That has not been added to the tree"
  end
  node.parent = existing_parent
  existing_parent.children.push(node.id).uniq
end
@nodes[node.id] = node
</code></pre>

<p>  end
end
```</p>

<p>This class gives us a single accessor for nodes which is just a hash of Node objects. We can retrieve
a node via a method or with hash-like syntax. The <code>add_node</code> method will add a node to the tree and it will also
update the children on a parent node. Now we can do fun stuff like this:</p>

<p>```ruby
nodes = [n1, n2, n3, n4, n5]
tree = Tree.new
nodes.each {|n| tree.add_node n}</p>

<p>tree.node(4).name         #=> &lsquo;four&rsquo;
tree.node(4).parent.name  #=> &lsquo;three&rsquo;
tree.node(1).children.map(&amp;:id)     #=> [2,3]
```</p>

<p>Now lets add some functionality to traverse the tree to get ancestors as well as the path of a node. These
methods are part of the Tree class.</p>

<p>```ruby
def ancestors(node, ancestor_list = [])
  # traverse up the tree to get all parents
  # return the list if the parent of the current node is already in the list
  if node.parent &amp;&amp; !ancestor_list.include?(node.parent)</p>

<pre><code>ancestor_list.push node.parent
self.ancestors(node.parent, ancestor_list)
</code></pre>

<p>  else</p>

<pre><code>ancestor_list.empty? ? nil : ancestor_list.reverse
</code></pre>

<p>  end
end</p>

<p>def path(node)
  if node.parent.nil?</p>

<pre><code>path = node.id.to_s
</code></pre>

<p>  else</p>

<pre><code>path = ancestors(node).push(node).map{ |n| n.id.to_s) }.join ':'
</code></pre>

<p>  end
end
```</p>

<p>Ancestors will return an array of node objects ordered from the top of the graph down to the parent
of the given node. The path method uses the ancestor array to generate a human readable path to the node.
Given the same tree above:</p>

<p><code>ruby
tree.ancestors(n4).map(&amp;:name) #=&gt; ["one", "three"]
tree.path(n4) #=&gt; '1:3:4'
</code></p>

<p>The path method could be used, for example, to generate URL paths from an XML taxonomy tree
or other data structure.</p>

<p><a href="https://gist.github.com/leklund/f1fb60ea820720463938">Complete code gist.</a></p>
]]></content>
  </entry>
  
</feed>
